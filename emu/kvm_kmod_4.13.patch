--- include/uapi/linux/kvm.h.orig	2018-06-04 13:40:15.991997742 -0500
+++ include/uapi/linux/kvm.h	2018-06-04 13:40:35.632391827 -0500
@@ -12,7 +12,7 @@
 #include <linux/ioctl.h>
 #include <asm/kvm.h>
 
-#define KVM_API_VERSION 12
+#define KVM_API_VERSION 2411
 
 /* *** Deprecated interfaces *** */
 
--- arch/x86/kvm/vmx.c.orig	2018-06-04 13:40:14.895975746 -0500
+++ arch/x86/kvm/vmx.c	2018-06-04 13:41:30.513492383 -0500
@@ -56,6 +56,8 @@
 #include "trace.h"
 #include "pmu.h"
 
+#define PASS_EVERYTHING_TO_USERSPACE                                                                                                                                                                         
+#define DEBUG_PASS_EVERYTHING_TO_USERSPACE
 #define __ex(x) __kvm_handle_fault_on_reboot(x)
 #define __ex_clear(x, reg) \
 	____kvm_handle_fault_on_reboot(x, "xor " reg " , " reg)
@@ -88,6 +90,10 @@ module_param_named(eptad, enable_ept_ad_
 static bool __read_mostly emulate_invalid_guest_state = true;
 module_param(emulate_invalid_guest_state, bool, S_IRUGO);
 
+#ifdef PASS_EVERYTHING_TO_USERSPACE
+static u32 __exception_bitmap = 0;
+#endif
+
 static bool __read_mostly fasteoi = 1;
 module_param(fasteoi, bool, S_IRUGO);
 
@@ -1895,8 +1901,16 @@ static void update_exception_bitmap(stru
 	 */
 	if (is_guest_mode(vcpu))
 		eb |= get_vmcs12(vcpu)->exception_bitmap;
-
+#ifdef PASS_EVERYTHING_TO_USERSPACE                                                                                                                                                                          
+        // LM: Trap all exceptions
+         __exception_bitmap = eb;
+         vmcs_write32(EXCEPTION_BITMAP, 0xffffffe7);
+#ifdef DEBUG_PASS_EVERYTHING_TO_USERSPACE
+         printk(KERN_ERR "Updated exception bitmap %x,", vmcs_read32(EXCEPTION_BITMAP));
+#endif
+#else
 	vmcs_write32(EXCEPTION_BITMAP, eb);
+#endif
 }
 
 static void clear_atomic_switch_msr_special(struct vcpu_vmx *vmx,
@@ -5371,9 +5385,15 @@ static int vmx_vcpu_setup(struct vcpu_vm
 		vmx->ple_window = ple_window;
 		vmx->ple_window_dirty = true;
 	}
-
+#ifdef PASS_EVERYTHING_TO_USERSPACE
+        // printk(KERN_ERR "PAGE_FAULT_ERROR_CODE_MASK %x\n", !!bypass_guest_pf);
+        // printk(KERN_ERR "PAGE_FAULT_ERROR_CODE_MATCH %x\n", !!bypass_guest_pf);
+        vmcs_write32(PAGE_FAULT_ERROR_CODE_MASK, 0x0);
+        vmcs_write32(PAGE_FAULT_ERROR_CODE_MATCH, 0x0);
+#else
 	vmcs_write32(PAGE_FAULT_ERROR_CODE_MASK, 0);
 	vmcs_write32(PAGE_FAULT_ERROR_CODE_MATCH, 0);
+#endif
 	vmcs_write32(CR3_TARGET_COUNT, 0);           /* 22.2.1 */
 
 	vmcs_write16(HOST_FS_SELECTOR, 0);            /* 22.2.4 */
@@ -5794,6 +5814,21 @@ static int handle_exception(struct kvm_v
 	vect_info = vmx->idt_vectoring_info;
 	intr_info = vmx->exit_intr_info;
 
+#ifdef PASS_EVERYTHING_TO_USERSPACE
+        // LM: pass all exceptions to usespace
+        error_code = 0;
+        if (intr_info & INTR_INFO_DELIVER_CODE_MASK)
+                error_code = vmcs_read32(VM_EXIT_INTR_ERROR_CODE);
+        ex_no = intr_info & INTR_INFO_VECTOR_MASK;
+        if (ex_no == 0xe) {  // set cr2
+                vcpu->arch.cr2 = vmcs_readl(EXIT_QUALIFICATION);
+        }
+        kvm_run->exit_reason = KVM_EXIT_EXCEPTION;
+        kvm_run->ex.exception = ex_no;
+        kvm_run->ex.error_code = error_code;
+        return 0;
+#endif
+
 	if (is_machine_check(intr_info))
 		return handle_machine_check(vcpu);
 
@@ -6221,7 +6256,12 @@ static int handle_interrupt_window(struc
 
 static int handle_halt(struct kvm_vcpu *vcpu)
 {
+#ifdef PASS_EVERYTHING_TO_USERSPACE
+        vcpu->run->exit_reason = KVM_EXIT_HLT;
+        return 0;
+#else
 	return kvm_emulate_halt(vcpu);
+#endif
 }
 
 static int handle_vmcall(struct kvm_vcpu *vcpu)
@@ -6699,6 +6739,10 @@ static __init int hardware_setup(void)
 	if (!cpu_has_vmx_ple())
 		ple_gap = 0;
 
+#ifdef DEBUG_PASS_EVERYTHING_TO_USERSPACE
+	printk(KERN_ERR "KVM setup done, ept is %s\n", enable_ept ? "enabled" : "disabled");
+#endif
+
 	if (!cpu_has_vmx_apicv()) {
 		enable_apicv = 0;
 		kvm_x86_ops->sync_pir_to_irr = NULL;
@@ -8548,6 +8592,11 @@ static int vmx_handle_exit(struct kvm_vc
 	trace_kvm_exit(exit_reason, vcpu, KVM_ISA_VMX);
 	vcpu->arch.gpa_available = false;
 
+        //#ifdef DEBUG_PASS_EVERYTHING_TO_USERSPACE
+        printk(KERN_ERR "VMExit at %x reason %x bitmap %x\n", 
+               kvm_rip_read(vcpu), exit_reason);
+        //#endif    
+
 	/*
 	 * Flush logged GPAs PML buffer, this will make dirty_bitmap more
 	 * updated. Another good is, in kvm_vm_ioctl_get_dirty_log, before
@@ -8625,9 +8674,35 @@ static int vmx_handle_exit(struct kvm_vc
 		}
 	}
 
+#ifdef PASS_EVERYTHING_TO_USERSPACE
+        if (exit_reason < kvm_vmx_max_exit_handlers
+            && kvm_vmx_exit_handlers[exit_reason]) {
+          int r;
+          r = kvm_vmx_exit_handlers[exit_reason](vcpu);
+          // Instruction handled correctly but exception injected into
+          // the guest
+          if (r == 1 && vcpu->arch.exception.pending) {
+#ifdef DEBUG_PASS_EVERYTHING_TO_USERSPACE
+            printk(KERN_ERR "Detected %s pending exception %x\n",
+                   (1 << vcpu->arch.exception.nr) &
+                   vmcs_read32(EXCEPTION_BITMAP) ?
+                   "masked" : "non masked", vcpu->arch.exception.nr);
+#endif
+            if ((1 << vcpu->arch.exception.nr) & vmcs_read32(EXCEPTION_BITMAP)) {
+              vcpu->run->exit_reason = KVM_EXIT_EXCEPTION;
+              vcpu->run->ex.exception = vcpu->arch.exception.nr;
+              vcpu->run->ex.error_code = vcpu->arch.exception.has_error_code ?
+                vcpu->arch.exception.error_code : 0;
+              return 0;
+            }
+          }
+          return r;
+        }
+#else
 	if (exit_reason < kvm_vmx_max_exit_handlers
 	    && kvm_vmx_exit_handlers[exit_reason])
 		return kvm_vmx_exit_handlers[exit_reason](vcpu);
+#endif
 	else {
 		vcpu_unimpl(vcpu, "vmx: unexpected exit reason 0x%x\n",
 				exit_reason);
@@ -9385,6 +9460,10 @@ static struct kvm_vcpu *vmx_create_vcpu(
 		goto free_msrs;
 	loaded_vmcs_init(vmx->loaded_vmcs);
 
+#ifdef DEBUG_PASS_EVERYTHING_TO_USERSPACE
+	printk(KERN_ERR "VMCS init\n");
+#endif
+
 	cpu = get_cpu();
 	vmx_vcpu_load(&vmx->vcpu, cpu);
 	vmx->vcpu.cpu = cpu;
