
@@ -620,12 +628,17 @@
 	  raise NullDereference;
 	(v, ty)
 
+    val mutable custom_store_hooks = []
+
+    method set_store_hook f = 
+      custom_store_hooks <- f :: custom_store_hooks
+
     method private handle_store addr_e ty rhs_e =
       let (r, addr) = self#eval_addr_exp_region addr_e and
 	  value = self#eval_int_exp_simplify rhs_e in
 	if r = Some 0 && (Int64.abs (fix_s32 addr)) < 4096L then
 	  raise NullDereference;
-	if !opt_trace_stores then
+        if !opt_trace_stores then
 	  if not (ty = V.REG_8 && r = None) then
 	    (Printf.printf "Store to %s "
 	       (match r with
@@ -636,6 +649,15 @@
 	     (if !opt_use_tags then
 		Printf.printf " (%Ld @ %08Lx)" (D.get_tag value) location_id);
 	     Printf.printf "\n");
+	let value_e = 
+	  match ty with
+	    | V.REG_8 -> (D.to_symbolic_8 value)
+	    | V.REG_16 -> (D.to_symbolic_16 value)
+	    | V.REG_32 -> (D.to_symbolic_32 value)
+	    | V.REG_64 -> (D.to_symbolic_64 value)
+	    | _ -> failwith "Unsupported type in memory move"
+	in
+        List.iter(fun f -> f addr (V.bits_of_width ty) (V.exp_to_string value_e)) custom_store_hooks;
 	(match ty with
 	   | V.REG_8 -> self#store_byte_region r addr value
 	   | V.REG_16 -> self#store_short_region r addr value
